answers

   
lab1
* Where is the origin placed in the on-screen coordinate system?

In the middle of the square, also in the middle of the screen.

* Which direction are the X and Y axes pointing in the on-screen coordinate system?


^
|
|
|
Yx ----->


* Instead of rendering the polygon as-is, OpenGL decomposes it into a set of triangles and renders those instead. Why?


Because triangles are less complex, and remove a few problem causes.


* Explain the effect of your sequence of polygon rendering commands (how many triangles are drawn, what color/position is used for each vertex, etc).
  glBegin(GL_POLYGON);
  glColor3f(1, 1, 1);
  glVertex3f(-0.5, 0.5, 0.0);
  glColor3f(0, 1, 1);
  glVertex3f(-0.5,-0.5, 0.0);
  glColor3f(1, 1, 0.3);
  glVertex3f( 0.5,-0.5, 0.0);
  glColor3f(1, 0, 1);
  glVertex3f( 0.5, 0.5, 0.0);
  glEnd();

We give each vertex it's own color by changing the color before every vertex.
As it is now, 2 triangles are drawn.

The Vertices has the color.
White for the upper left.
Magenta for down left.
Kinda yellow for down right.
Pink for upper right.

* Try changing the rotation speed and axis. For instance, how can you make it rotate around the Z axis?

Change the first and fourth parameter respectively, like so:
glRotatef(getElapsedTime() * SPEED, 0, 0, 1);


lab 1-3
    * What happens when you change the near- and far-Z-distances for the perspective transform?
If we change the near and far distances, we can see objects further away or the other way around.
And we are also able to hide objects that are too close to us. 

    * The example code defaults to a 90-degree field of vision. Do you find that it looks natural? Is there another setting that looks better? How does the scene look with a very high FOV setting? 
Hmm, weird with high fov, when zooming in. 90degrees looks rather natural.


lab1-4

    * What problems did you encounter while building the cube?
Loads :D
But mainly figuring out which way i should draw the faces of the cube, to get the colors on the outside.

    * How do you flip the orientation of a polygon? 
just draw it the other way around.


lab1-5
    * Change the position of the light source. What coordinate system is the light source position defined in?

It's origin is located in the camera.

    * How can you create a working directional light?

You can set the fourth parameter to zero, that makes it an directional light, the three first parameters then works as a vector, deciding where the light is pointed towards. For instance, pointing in the same direction as the camera: GLfloat light_position[] = { 0.0, 0.0, 1.0, 0.0 };

    * What happens if you move glLightfv to after the getObjectMatrix() call? 



The light has the same coordinate system as the world, meaning GLfloat light_position[] = { 0.0, 0.0, -.3, 1.0 }; will put it at the far side of the cube.

    * Modify texture coordinates so you use the interval [-1, 2]. What is the visual result when changing texture wrapping mode from GL_REPEAT to GL_CLAMP_TO_EDGE?

GL_CLAMP_TO_EDGE will use the last pixel and draw that until it reaches the edge

    * Are there any aesthetic differences between GL_LINEAR and GL_NEAREST filtering? 

yes. especially when zooming out, you'll see that GL_LINEAR uses a better texture sampling \o7
